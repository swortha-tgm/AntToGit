<project name="Hello" basedir="." default="main">

	<property name="classes.dir" value="build/classes" />
	<property name="junit.output.dir" value="htmlreport" />
	<property name="doc.dir" value="doc" />
	<property name="source.dir" value="src" />
	<property name="jar.dir" value="build/jar" />
	<property name="jar.name" value="${ant.project.name}.jar" />


	<path id="JUnit4.libraryclasspath">
		<pathelement location="lib/hamcrest-core.jar" />
		<pathelement location="lib/junit.jar" />
	</path>

	<path id="Hello.classpath">
		<pathelement location="${classes.dir}" />
		<path refid="JUnit4.libraryclasspath" />
	</path>

	<target name="clean">
		<delete dir="build" />
		<delete dir="doc" />
		<delete dir="htmlreport" />
	</target>

	<target name="compile">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="src" destdir="${classes.dir}" />
	</target>

	<target name="jar" depends="compile, test, doc">
		<mkdir dir="${jar.dir}" />
		<jar destfile="${jar.dir}/${jar.name}" basedir="${classes.dir}">
			<manifest>
				<attribute name="Main-Class" value="hello.Hello" />
			</manifest>
			<fileset dir="." includes="${doc.dir}/**" />
			<fileset dir="." includes="${junit.output.dir}/**" />
			<fileset dir="${source.dir}" includes="**/*.java" />
		</jar>
	</target>

	<target name="run" depends="jar">
		<java jar="build/jar/${ant.project.name}.jar" fork="true" />
	</target>

	<target name="main" depends="clean,run" />


	<target name="compileTest" depends="compile" description="compile jUnit Test cases ">
		<javac srcdir="${test-dir}" destdir="${bin}" includeantruntime="true" nowarn="yes" debug="true" />
	</target>

	<target name="unittest" depends="compile">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="test.HelloTest" todir="${junit.output.dir}" />
			<classpath refid="Hello.classpath" />
		</junit>
	</target>

	<target name="junitreport" depends="unittest">
		<mkdir dir="${junit.output.dir}" />
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.output.dir}" />
		</junitreport>
	</target>


	<target name="test" depends="unittest,junitreport" />

	<target name="doc">
		<mkdir dir="${doc.dir}" />
		<javadoc sourcepath="${source.dir}" destdir="${doc.dir}" classpathref="Hello.classpath" />
	</target>

	<target name="copy" depends="jar">
		<input message="Bitte die IP des Remote-Servers eingeben" addproperty="remote.ip" />
		<input message="Bitte Username des Remote-Servers ${remote.ip} eingeben" addproperty="remote.user" />
		<input message="Bitte Passwort des Users ${remote.user} unter ${remote.ip} eingeben" addproperty="remote.password" />
		<scp file="${jar.dir}/${jar.name}" todir="${remote.user}:${remote.password}@${remote.ip}:${remote.dir}" trust="true" />
	</target>

	<macrodef name="git">
		<attribute name="command" />
		<attribute name="dir" default="" />
		<element name="args" optional="true" />
		<sequential>
			<echo message="git @{command}" />
			<exec executable="git" dir="@{dir}">
				<arg value="@{command}" />
				<args />
			</exec>
		</sequential>
	</macrodef>

	<target name="scm" description="Commits all changes to version git">
		<input message="Commit message" addproperty="commit-message" />
		<echo message="Commiting all changes with message ${commit-message}" />
		<git command="add">
			<args>
				<arg value="." />
			</args>
		</git>
		<git command="commit">
			<args>
				<arg value="-am ${commit-message}" />
			</args>
		</git>
		<git command="push" />
	</target>

</project>
